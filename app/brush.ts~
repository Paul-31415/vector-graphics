import * as PIXI from "pixi.js";
import { Point, Style, Color, Scalar } from "./vectors";
import { Bezier, WeightedVector } from "./bezier";
import { PtTransform } from "./transform";


interface Brush {
    line2d(g: PIXI.Graphics, x1: number, y1: number, x2: number, y2: number): PIXI.Graphics;
    ellipse2d(g: PIXI.Graphics, x: number, y: number, w: number, h: number): PIXI.Graphics;
    poly2d(g: PIXI.Graphics, pts: Array<Array<number>>): PIXI.Graphics;

    point(g: PIXI.Graphics, t: PtTransform, p1: Point | WeightedVector<Point>): PIXI.Graphics;
    line(g: PIXI.Graphics, t: PtTransform, p1: Point | WeightedVector<Point>, p2: Point | WeightedVector<Point>): PIXI.Graphics;
    polyLine(g: PIXI.Graphics, t: PtTransform, pts: Array<Point | WeightedVector<Point>>): PIXI.Graphics;
    curve(g: PIXI.Graphics, t: PtTransform, c: Bezier<Point | WeightedVector<Point>>, res: number): PIXI.Graphics;
    polyCurve(g: PIXI.Graphics, t: PtTransform, c: Array<Bezier<Point | WeightedVector<Point>>>, res: number): PIXI.Graphics;
    surface(g: PIXI.Graphics, t: PtTransform, s: Bezier<Bezier<Point | WeightedVector<Point>> | WeightedVector<Bezier<Point | WeightedVector<Point>>>>, res: number): PIXI.Graphics;
    volume(g: PIXI.Graphics, t: PtTransform, s: Bezier<Bezier<Bezier<Point | WeightedVector<Point>> | WeightedVector<Bezier<Point | WeightedVector<Point>>>> | WeightedVector<Bezier<Bezier<Point | WeightedVector<Point>> | WeightedVector<Bezier<Point | WeightedVector<Point>>>>>>, res: number): PIXI.Graphics;

}

class Selected_br implements Brush {
    s: Style;
    constructor() {
        this.s = new Style({ "color": new Color(128, 128), "width": new Scalar(2) });
    }

    line2d(g: PIXI.Graphics, x1: number, y1: number, x2: number, y2: number): PIXI.Graphics {
        g.moveTo(x1, y1);
        this.s.apply(g, this.s);
        g.lineTo(x2, y2);
        return g;
    }
    ellipse2d(g: PIXI.Graphics, x: number, y: number, w: number, h: number): PIXI.Graphics {
        this.s.apply(g, this.s);
        g.drawEllipse(x, y, w, h);
        return g;
    }
    poly2d(g: PIXI.Graphics, pts: number[][]): PIXI.Graphics {
        throw new Error("Method not implemented.");
    }
    point(g: PIXI.Graphics, t: PtTransform, p1: Point | WeightedVector<Point>): PIXI.Graphics {
        throw new Error("Method not implemented.");
    }
    line(g: PIXI.Graphics, t: PtTransform, p1: Point | WeightedVector<Point>, p2: Point | WeightedVector<Point>): PIXI.Graphics {
        throw new Error("Method not implemented.");
    }
    polyLine(g: PIXI.Graphics, t: PtTransform, pts: (Point | WeightedVector<Point>)[]): PIXI.Graphics {
        throw new Error("Method not implemented.");
    }
    curve(g: PIXI.Graphics, t: PtTransform, c: Bezier<Point | WeightedVector<Point>>, res: number): PIXI.Graphics {
        throw new Error("Method not implemented.");
    }
    polyCurve(g: PIXI.Graphics, t: PtTransform, c: Bezier<Point | WeightedVector<Point>>[], res: number): PIXI.Graphics {
        throw new Error("Method not implemented.");
    }
    surface(g: PIXI.Graphics, t: PtTransform, s: Bezier<Bezier<Point | WeightedVector<Point>> | WeightedVector<Bezier<Point | WeightedVector<Point>>>>, res: number): PIXI.Graphics {
        throw new Error("Method not implemented.");
    }
    volume(g: PIXI.Graphics, t: PtTransform, s: Bezier<Bezier<Bezier<Point | WeightedVector<Point>> | WeightedVector<Bezier<Point | WeightedVector<Point>>>> | WeightedVector<Bezier<Bezier<Point | WeightedVector<Point>> | WeightedVector<Bezier<Point | WeightedVector<Point>>>>>>, res: number): PIXI.Graphics {
        throw new Error("Method not implemented.");
    }







}
